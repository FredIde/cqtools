#!/usr/bin/perl
use strict;

package CQAdm;

use autodie qw(:all);

use Cwd qw(cwd abs_path);
use Digest::MD5 'md5_hex';
use File::Slurp 'write_file';
use HTML::Entities;
use HTTP::Request::Common qw(GET POST);
use JSON qw(decode_json encode_json);
use LWP::UserAgent;
use URI;
use YAML 'LoadFile';

use constant WAIT_MIN => 0.5;
use constant WAIT_MAX => 3;
use constant WAIT_FACTOR=> 1.5;
use constant CONFIG_NAME => '.cqadm';
use constant CMD_MAP => { mkdir => 'mknode', exists => 'is_present' };

sub new {
    my ($class, $options) = @_;
    my $self = bless {
        cmd => 0,
        %$options,
    }, $class;
    $self->_load_config;
    $self->{url} ||= 'http://localhost:4502',
    $self->{user} ||= 'admin:admin',
    return $self;
}

sub cmd {
    my $class = shift;
    my ($options, $cmd, $args) = $class->_parse_args(@_);
    $options->{cmd} = 1;
    my $self = $class->new($options);
    $cmd = $self->CMD_MAP->{$cmd} if exists $self->CMD_MAP->{$cmd};
    $cmd = 'help' if !$cmd or !$self->can($cmd);
    my $out;
    eval {
        $out = $self->$cmd(@$args);
    };
    if ($@) {
        my $error = $@;
        $error .= "\n" if length $error and $error !~ /\n$/;
        warn $error;
        exit -1;
    } else {
        print $out;
        print "\n" if length $out and $out !~ /\n$/ and -t STDOUT;
        exit 0;
    }
}

sub _load_config {
    my ($self) = @_;
    if (my $file = $self->_find_config) {
        my ($config) = LoadFile($file);
        $self->{conf} = abs_path $file;
        $self->{$_} or $self->{$_} = $config->{$_} for keys %$config;
    }
}

sub _find_config {
    my ($self) = @_;
    return $self->{conf} if $self->{conf} and -r $self->{conf};
    return $self->{c} if $self->{c} and -r $self->{c};
    return $ENV{CQCTL_CONF} if $ENV{CQCTL_CONF} and -r $ENV{CQCTL_CONF};
    my $save_cwd = cwd;
    while (cwd ne '/') {
        if (-r CONFIG_NAME) {
            my $c = cwd . '/' . CONFIG_NAME;
            chdir $save_cwd;
            return $c;
        }
        chdir '..';
    }
    chdir $save_cwd;
    return $ENV{HOME} . CONFIG_NAME if $ENV{HOME} and -r $ENV{HOME} . CONFIG_NAME;
    return;
}

sub _parse_args {
    my $class = shift;

    my $cmd;
    my $options = {};
    my $args = [];

    while(@_) {
        my $a = shift;
        if ($a eq '--conf' or $a eq '-c') {
            $options->{conf} = shift;
        } elsif ($a eq '--user' or $a eq '-u') {
            $options->{user} = shift;
        } elsif ($a eq '--url') {
            $options->{url} = shift;
        } elsif ($a eq '--insecure') {
            $options->{insecure} = 1;
        } else {
            push @$args, $a;
        }
    }

    $cmd = shift @$args;
    $cmd =~ s/-/_/g;
    $cmd = undef if $cmd =~ /^_/;

    return ($options, $cmd, $args);
}

sub help {
    die <<HELP;
usage: $0 <cmd> [ --conf|-c <file> ] [ --url <http://localhost:4502> ] [ --user|-u <admin:admin> ] [ --insecure ]
    help
    status
    info
    wait-for-start
    get <path> [ --output|-o <file> ]
    put <path> <value> [ --type|-t <proptype> ]
    rm <path ... > [ --force | -f ]
    cp <path ... > <dest>
    mv <path ... > <dest>
    mkdir <path> [ --type|-t <nodetype> ]
    get-json <path> [ --tidy ] [ --depth|-d <num|infinite> ] [ --output|-o <file> ]
    put-json <path> [ <json> ]
    ls [ -l ] <path>
    exists <path>
    query-sql [ --json ] <query> [ <field ... > ]
    query-xpath [ --json ] <query> [ <field ... > ]
    pkg-install </etc/packages/pkg-path.zip ... >
    pkg-install <localpackage.zip ... >
    pkg-create [ --build ] <pkg-group/pkg-name> <path ... >
    pkg-build </etc/packages/pkg-path.zip>
    pkg-remove </etc/packages/pkg-path.zip>
    zip [ --output|-o <file> ] <path ... >
    get-runmode
    online-backup <path> [ --delay <ms> ]
    online-backup-cancel
    wait-for-online-backup
    find-config <osgipid>
    get-config <osgipid> [ <property> ]
    set-config <osgipid> <prop> <value> [ <prop> <value> ... ] [ --path <path> ]
    force-delete-config <osgipid>
HELP

# TODO:
# put-file [ <localfilename> | - ] <path>
# pkg-install </etc/packages/pkg-path.zip>
# pkg-install <localpackage.zip>
# get-threads
# get-replication-queue
# activate
# deactivate
# open
# touch

}

sub status {
    my $self = shift;
    my $status = $self->_get_status(@_);
    print $status->{message}."\n";
    exit $status->{exit_code};
}

sub _get_status {
    my $self = shift;
    my $status = {};

    my $vmstat = $self->_get('/system/console/vmstat');
    $vmstat =~ qr{var statData = (\{.*?\});}ms and $status->{vmstat} = decode_json $1;

    $status->{starting} = $status->{vmstat} && $status->{vmstat}{systemStartLevel} < 30;
    $status->{started} = $status->{vmstat} && $status->{vmstat}{systemStartLevel} >= 30;
    $status->{not_running} = !$status->{started} && !$status->{starting};

    if ($status->{started}) {
        my $res = $self->_get('/login', '');
        $status->{login_ready} = $res =~ /<!-- QUICKSTART_HOMEPAGE /;
    }

    if ($status->{login_ready}) {
        my $res = $self->_get('/welcome');
        $res =~ qr{<div id="productinfo">\s*(.*?) \|} and $status->{product_info} = $1;
        $status->{product_info} =~ m{Version ([0-9.]+)} and $status->{version} = $1;
    }

    $status->{ready} = $status->{product_info} =~ /^Adobe\b/;

    if ($status->{not_running}) {
        $status->{message} = 'CQ is not running';
        $status->{exit_code} = 3;
    } elsif ($status->{starting}) {
        $status->{message} = 'CQ is starting';
        $status->{exit_code} = 4;
    } elsif ($status->{started} && !$status->{ready}) {
        $status->{message} = 'CQ is started, but not ready';
        $status->{exit_code} = 5;
    } elsif ($status->{ready}) {
        $status->{message} = 'CQ is ready';
        $status->{exit_code} = 0;
    } else {
        $status->{message} = 'CQ status is unknown';
        $status->{exit_code} = -1;
    }

    return $status;
}

sub info {
    my $status = shift->_get_status;
    if ($status->{ready}) {
        return <<OUT
$status->{product_info}
$status->{vmstat}{runtime}
Started $status->{vmstat}{lastStarted}, up $status->{vmstat}{upTime}
OUT
    }
}

sub _user_agent {
    my $self = shift;
    my $ua = LWP::UserAgent->new;
    $ua->ssl_opts(verify_hostname => 0) if $self->{insecure};
    return $ua;
}

sub _get_raw {
    my ($self, $url, $user) = @_;
    my $ua = $self->_user_agent;
    my $req = GET(URI->new_abs($url, $self->{url}));
    $req->header(user_agent => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36');
    $user = $self->{user} unless defined $user;
    $req->authorization_basic(split ':', $user) if $user;
    return $ua->request($req);
}

sub _post_sling {
    # TODO: change to use form-data encoding
    my ($self, $url, $params) = @_;
    my $ua = $self->_user_agent;
    my $req = POST(URI->new_abs($url, $self->{url}), $params);
    $req->authorization_basic(split ':', $self->{user}) if $self->{user};
    $req->header(accept => 'application/json,/;q=0.9');
    my $res = $ua->request($req);
    if ($res->is_success) {
        return decode_json($res->content);
    } else {
        die CQAdm::SlingPostServletError->new($res);
    }
}

sub _post_pkg {
    my ($self, $url, $params) = @_;
    my $ua = $self->_user_agent;
    my $req = POST(URI->new_abs($url, $self->{url}), $params ? (Content_Type => 'form-data', Content => $params) : ());
    $req->authorization_basic(split ':', $self->{user}) if $self->{user};
    $req->header(accept => 'application/json,/;q=0.9');
    my $res = $ua->request($req);
    die 'unauthorized' if $res->code == 401;
    die CQAdm::PkgGenericError->new($res->content) unless $res->content =~ /^\{/;
    my $msg = decode_json($res->content);
    die CQAdm::PkgError->new($msg) unless $msg->{success};
    return $msg;
}

sub _post_raw {
    my ($self, $url, $params) = @_;
    my $ua = $self->_user_agent;
    push @{ $ua->requests_redirectable }, 'POST';
    my $req = POST(URI->new_abs($url, $self->{url}), $params || {});
    $req->authorization_basic(split ':', $self->{user}) if $self->{user};
    return $ua->request($req);
}

sub _get {
    my $self = shift;
    my $res = $self->_get_raw(@_);
    return $res->is_success && $res->content;
}

sub wait_for_start {
    my $self = shift;
    _try(sub { $self->_get_status->{ready} });
    return;
}

sub _try {
    my $code = shift;
    my $max = shift;
    my $start = time;
    my $wait = WAIT_MIN;
    while(1) {
        my $r = $code->();
        return $r if $r;
        return if $max and time-$start > $max;
        sleep $wait;
        $wait *= WAIT_FACTOR;
        $wait = WAIT_MAX if $wait > WAIT_MAX;
    }
}

sub _parse_cmd_opts {
    my $spec = shift;
    my $self = shift;
    my $options = {};
    my @rest;
    while (@_) {
        my $o = shift;
        if ($o =~ /^-+(.*)/) {
            my $s = $1;
            $s =~ s/-/_/g;
            $s = $spec->{$s} if exists $spec->{$s} and $spec->{$s};
            $options->{$s} = (exists $spec->{$s} && !defined $spec->{$s} ? 1 : shift);
        } else {
            push @rest, $o;
        }
    }
    return ($self, $options, @rest);
}

sub get {
    my ($self, $options, $path) = _parse_cmd_opts({ o => 'output' }, @_);
    my $res = $self->_get_raw($path);
    # TODO make this stream when possible
    die "cannot get path $path\n" unless $res->is_success;
    $res = $self->_get_raw("$path.html") if $res->content_type eq 'text/html';
    if ($options->{output}) {
        write_file($options->{output}, $res->content);
        return;
    } else {
        return $res->content;
    }
}

sub get_json {
    my ($self, $options, $path) = _parse_cmd_opts({ d => 'depth', o => 'output', tidy => undef }, @_);
    my $selector = $options->{depth} || 0;
    $selector = "tidy.$selector" if exists $options->{tidy};
    my $res = $self->_get_raw("$path.$selector.json");
    die "cannot get path $path\n" unless $res->is_success;
    if ($options->{output}) {
        write_file($options->{output}, $res->content);
        return;
    } else {
        return $res->content;
    }
}

sub ls {
    my ($self, $options, $path) = _parse_cmd_opts({ l => 'long', long => undef }, @_);
    my $res = $self->_get_raw("$path.1.json");
    die "cannot list path $path\n" unless $res->is_success;
    my $items = decode_json($res->content);
    my $out = '';
    for my $item (keys %$items) {
        my $value = $items->{$item};
        if (ref $value eq 'HASH') {
            $out .= "$item/\n";
        } else {
            if ($options->{long}) {
                if (ref $value eq 'ARRAY') {
                    $value = '[ ' . join(', ', @$value) . ' ]';
                }
                $out .= "$item: $value\n";
            } else {
                $out .= "$item\n";
            }
        }
    }
    return $out;
}

sub is_present {
    my ($self, $options, $path) = _parse_cmd_opts({}, @_);
    my $res = $self->_get_raw("$path.1.json");
    if ($res->is_success) {
        return $path;
    } else {
        return;
    }
}

sub _cpmv {
    my ($self, $options, $op, @paths) = _parse_cmd_opts({}, @_);
    my $dst = pop @paths;
    my $params = {
        ':operation' => $op,
        ':dest' => ($self->is_present($dst) ? "$dst/" : $dst),
    };
    $params->{':applyTo'} = \@paths if @paths > 1;
    $self->_post_sling($paths[0], $params);
    return;
}

sub cp { shift->_cpmv('copy', @_) }
sub mv { shift->_cpmv('move', @_) }

sub query_sql {
    my $self = shift;
    return $self->_query('sql', @_);
}

sub query_xpath {
    my $self = shift;
    return $self->_query('xpath', @_);
}

sub _query {
    my $self = shift;
    my $type = shift;
    unshift @_, undef;
    my (undef, $options, $query, @fields) = _parse_cmd_opts({ json => undef }, @_);
    my $ua = $self->_user_agent;
    my $url = URI->new_abs('/content.query.json', $self->{url});
    $url->query_form(queryType => $type, statement => $query);
    my $req = GET($url);
    $req->authorization_basic(split ':', $self->{user}) if $self->{user};
    $req->header(accept => 'application/json,/;q=0.9');
    my $res = $ua->request($req);
    die CQAdm::QueryError->new($res->content) unless $res->is_success;
    if ($options->{json}) {
        return $res->content;
    } else {
        my $data = decode_json($res->content);
        @fields = grep { $_ ne 'name' and $_ ne 'jcr:score' } keys %{$data->[0]} unless @fields;

        if (wantarray) {
            my @out;
            for my $row (@$data) {
                push @out, [ map { $row->{$_} } @fields ];
            }
            return @out;
        } else {
            my $out;
            for my $row (@$data) {
                $out .= join("\t", map { $row->{$_} } @fields)."\n";
            }
            return $out;
        }
    }
}

sub put {
    my ($self, $options, $path, @values) = _parse_cmd_opts({ t => 'type' }, @_);
    my ($basename, $filename) = $path =~ m{(.*)/(.*)};

    my $value;
    if ($values[0] eq '[' and $values[-1] eq ']') {
        shift @values;
        pop @values;
        $value = \@values;
    } elsif (@values > 1) {
        $value = \@ values;
    } else {
        $value = shift @values;
    }

    my $params = {
        $filename => $value,
    };
    $params->{"$filename\@TypeHint"} = $options->{type} if $options->{type};

    $self->_post_sling($basename, $params);
    return;
}

sub put_json {
    my ($self, $options, $path, @json) = _parse_cmd_opts({ replace => undef, r => 'replace' }, @_);
    my ($basename, $filename) = $path =~ m{(.*)/(.*)};
    my $params = {
        ':operation' => 'import',
        ':name' => $filename,
        ':contentType' => 'json',
    };
    $params->{':replace'} = $params->{':replaceProperties'} = 'true' if $options->{replace};
    if(@json == 0 || $json[0] eq '-') {
        $params->{':content'} = join '', <STDIN>;
    } elsif(ref $json[0]) {
        $params->{':content'} = encode_json($json[0]);
    } else {
        $params->{':content'} = $json[0];
    }
    $self->_post_sling("$basename/", $params);
    return;
}

sub rm {
    my ($self, $options, @path) = _parse_cmd_opts({ f => 'force', force => undef }, @_);
    for my $path (@path) {
        next if $options->{force} and not $self->is_present($path);
        my ($basename, $filename) = $path =~ m{(.*)/(.*)};
        $self->_post_sling($basename, { "$filename\@Delete" => 1 });
    }
    return;
}

sub mknode {
    my ($self, $options, $path) = _parse_cmd_opts({ t => 'type', p => undef }, @_);
    my ($basename, $filename) = $path =~ m{(.*)/(.*)};
    return if $options->{p} and $self->is_present($path);
    if ($options->{p} and length $basename > 1 and not $self->is_present($basename)) {
        $self->mknode($basename, $options->{type} ? ( '--type' => $options->{type} ) : ());
    }
    my $params = { ':name' => $filename };
    $params->{'jcr:primaryType'} = $options->{type} if $options->{type};
    $self->_post_sling("$basename/", $params);
    return;
}

sub pkg_create {
    my ($self, $options, $path, @filters) = _parse_cmd_opts({ 'build' => undef }, @_);
    my ($group, $pkg) = ('tmp', $path);
    ($group, $pkg) = ($1, $2) if $path =~ m{(.*?)/(.*)};
    my $pkg_res = $self->_post_pkg('/crx/packmgr/service/.json', { cmd => 'create', packageName => $pkg, groupName => $group });
    my $filter = {
        'sling:resourceType' => 'cq/packaging/components/pack/definition/filterlist',
        'jcr:primaryType' => 'nt:unstructured',
    };
    for (my $i = 0; $i < @filters; $i++) {
        $filter->{"f$i"} = {
            rules => [],
            mode => 'replace',
            'sling:resourceType' => 'cq/packaging/components/pack/definition/filter',
            root => $filters[$i],
            'jcr:primaryType' => 'nt:unstructured',
        };
    }
    $self->_post_sling($pkg_res->{path} . '/jcr:content/vlt:definition/filter',
        { ':operation' => 'import', ':contentType' => 'json', ':content' => encode_json($filter) });

    $self->pkg_build($pkg_res->{path}) if $options->{build};
    return $pkg_res->{path};
}

sub pkg_build {
    my ($self, $options, $path) = _parse_cmd_opts({}, @_);
    $self->_post_pkg('/crx/packmgr/service/.json' . $path, { cmd => 'build' });
    return;
}

sub pkg_rm {
    my ($self, $options, $path) = _parse_cmd_opts({}, @_);
    $self->_post_pkg('/crx/packmgr/service/.json' . $path, { cmd => 'delete' });
    return;
}

sub zip {
    my ($self, $options, @paths) = _parse_cmd_opts({ o => 'output' }, @_);
    my $name = md5_hex(rand);
    my $pkg = $self->pkg_create($name, @paths);
    $self->pkg_build($pkg);
    my $ret = $self->get($pkg, $options->{output} ? ( '--output' => $options->{output} ) : ());
    $self->pkg_rm($pkg);
    return $ret;
}

sub pkg_install {
    my ($self, $options, @paths) = _parse_cmd_opts({}, @_);
    if ($paths[0] =~ m{^/etc/packages/}) {
        $self->pkg_install_remote($_) for @paths;
    } else {
        $self->pkg_install_local($_) for @paths;
    }
}

sub pkg_install_remote {
    my ($self, $options, $path) = _parse_cmd_opts({}, @_);
    $self->_post_pkg('/crx/packmgr/service/.json' . $path, [ cmd => 'install', recursive => 'true', acHandling => 'overwrite' ]);
    return;
}

sub pkg_install_local {
    my ($self, $options, $path) = _parse_cmd_opts({}, @_);
    die "package $path does not exist" unless -r $path;
    my $res = $self->_post_pkg('/crx/packmgr/service/.json', [ cmd => 'upload', force => 'true', package => [ $path ] ]);
    $self->pkg_install_remote($res->{path});
    return;
}

sub get_runmode {
    my ($self) = @_;
    my $settings = $self->_get('/system/console/config/slingsettings.txt');
    $settings =~ m{^Run Modes = \[\s*(.*?)\s*\]}m;
    return wantarray ? split(/\s*,\s*/, $1) : $1;
}

sub online_backup {
    my ($self, $options, $path) = _parse_cmd_opts({}, @_);
    my $params = { target => $path, force => 'true' };
    $params->{delay} = $options->{delay} if exists $options->{delay};
    my $res = $self->_post_raw('/libs/granite/backup/content/admin/backups/', $params);
    die "cannot start online backup\n" unless $res->is_success;
    return;
}

sub wait_for_online_backup {
    my ($self, $options) = _parse_cmd_opts({}, @_);
    my $ua = $self->_user_agent;
    my $url = URI->new_abs('/libs/granite/backup/content/admin/backups.progress.json', $self->{url});
    my $req = GET($url);
    $req->authorization_basic(split ':', $self->{user}) if $self->{user};
    $req->header(accept => 'application/json,/;q=0.9');
    _try(sub {
        my $res = $ua->request($req);
        my $status = decode_json($res->content);
        return not $status->{inProgress};
    });
    return;
}

sub online_backup_cancel {
    my ($self, $options) = _parse_cmd_opts({}, @_);
    my $res = $self->_post_raw('/libs/granite/backup/content/admin/backups.cancel.html');
    die "cannot cancel online backup\n" unless $res->is_success;
    return;
}

sub find_config {
    my ($self, $options, $pid) = _parse_cmd_opts({}, @_);
    die "pid required" unless $pid;
    die "invalid pid $pid" if $pid =~ m{[%'/]};
    my @paths = map { $_->[0] } $self->query_sql("select * from sling:OsgiConfig where jcr:path like '%/$pid'", 'jcr:path');
    my $modes = [ $self->get_runmode ];
    @paths = sort { _config_sort_helper($b, $modes) <=> _config_sort_helper($a, $modes) } @paths;
    return wantarray ? @paths : join "\n", @paths;
}

sub _config_sort_helper {
    my ($config, $runmodes) = @_;
    my %modes = map { $_ => 1 } @$runmodes;
    my $in_libs = substr($config, 0, 6) eq '/libs/';
    my $in_apps = substr($config, 0, 6) eq '/apps/';
    $config =~ m{/config(?:\.([^/]+))?/[^/]+$};
    my @modes = split /\./, $1;
    my @matching_modes = grep { exists $modes{$_} } @modes;
    my @slashes = $config =~ m{/}g;
    my $rank = (
        $in_libs * 1000 +
        $in_apps * 2000 +
        @matching_modes * 1000000000 +
        (999 - @modes) * 1000000 +
        @slashes * 1
    );
    return $rank;
}

sub get_config {
    my ($self, $options, $pid, $prop) = _parse_cmd_opts({ json => undef }, @_);
    my $config = $self->get('/system/console/config/Configurations.txt');
    my ($this_config) = $config =~ m{^PID = $pid\n(.*?)\n\n}ms;
    my $config = {};
    if ($this_config) {
        for my $line (split /\n/, $this_config) {
            next unless $line =~ m/^\s*(\S+) = (.*)/;
            my ($k, $v) = ($1, $2);
            $v = [ split /, /, $1 ] if $v =~ m{^\[(.*)\]$};
            $config->{$k} = $v;
        }
    } else {
        my $ua = $self->_user_agent;
        my $req = POST(URI->new_abs("/system/console/configMgr/$pid", $self->{url}));
        $req->authorization_basic(split ':', $self->{user}) if $self->{user};
        $req->header(accept => 'application/json,/;q=0.9');
        my $res = $ua->request($req);
        die "error reading config from felix console for $pid\n" unless $res->is_success;
        my $data = decode_json($res->content);
        for my $p (keys %{$data->{properties}}) {
            $config->{$p} = $data->{properties}{$p}{value} || $data->{properties}{$p}{values};
        }
    }
    if ($prop) {
        if ($options->{json}) {
            return JSON->new->allow_nonref->encode($config->{$prop});
        } else {
            return $config->{$prop} || '';
        }
    } else {
        if ($options->{json}) {
            return encode_json($config);
        } else {
            return join '', map { sprintf "%s = %s\n", $_, ref $config->{$_} ? join(', ', @{$config->{$_}}) : $config->{$_} } keys %$config;
        }
    }
}

sub _exists_node {
    my ($self, $path) = @_;
    my ($basename, $filename) = $path =~ m{(.*)/(.*)};
    my ($d) = eval { decode_json($self->get_json($basename, '--depth', 1)) };
    return unless $d;
    return exists $d->{$filename} && ref $d->{$filename} && exists $d->{$filename}{'jcr:primaryType'};
}

sub _exists_property {
    my ($self, $path) = @_;
    my ($basename, $filename) = $path =~ m{(.*)/(.*)};
    my ($d) = eval { decode_json($self->get_json($basename, '--depth', 1)) };
    return unless $d;
    return exists $d->{$filename} && !ref $d->{$filename};
}

sub set_config {
    my ($self, $options, $pid, @args) = _parse_cmd_opts({}, @_);
    my $props = {};
    while (@args) {
        my $p = shift @args;
        if ($args[0] eq '[') {
            shift @args;
            my @v;
            while ((my $n = shift @args) ne ']') {
                push @v, $n;
            }
            shift @args;
            $props->{$p} = \@v;
        } else {
            $props->{$p} = shift @args;
        }
    }

    my @runmodes = $self->get_runmode;
    my ($target) = $self->find_config($pid);
    $target = sprintf('/apps/system/config.%s/%s', join('.', @runmodes), $pid) if substr($target, 0, 6) ne '/apps/';
    $target = "$options->{path}/$pid" if $options->{path};

    my ($basename, $filename) = $target =~ m{(.*)/(.*)};
    $self->mknode($basename) unless $self->_exists_node($basename);

    $props->{'jcr:primaryType'} = 'sling:OsgiConfig';
    if ($self->_exists_node($target)) {
        $self->_post_sling($target, $props);
    } else {
        $props->{':name'} = $filename;
        $self->_post_sling("$basename/", $props);
    }
    return;
}

sub force_delete_config {
    my ($self, $options, $pid) = _parse_cmd_opts({}, @_);
    $self->_post_raw("/system/console/configMgr/$pid", { delete => 1, apply => 1 });
    return;
}

package CQAdm::SlingPostServletError;
use overload '""' => 'to_string';

sub new {
    my ($class, $res) = @_;
    my $self = bless {
        'response' => $res,
    }, $class;

    my $o = eval { decode_json $res->content };
    $self->{json} = $o if $o and not $@;

    $self->{message} = $self->{json} ? ( $self->{json}{'status.message'} || $self->{json}{title} ) : $self->{response}->message;

    return $self;
}

sub to_string {
    return $_[0]->{message};
}


package CQAdm::PkgError;
use overload '""' => 'to_string';

sub new {
    my ($class, $o) = @_;
    return bless $o || {}, $class;
}

sub to_string {
    return shift->{msg} || 'unknown package error';
}


package CQAdm::PkgGenericError;
use overload '""' => 'to_string';

sub new {
    my ($class, $s) = @_;
    return bless \$s, $class;
}

sub to_string {
    my $self = shift;
    $$self =~ m{java.lang.IllegalArgumentException: ([^\n\r]+)};
    return $1 || 'unknown package error';
}


package CQAdm::QueryError;
use overload '""' => 'to_string';

sub new {
    my ($class, $content) = @_;
    return bless \$content, $class;
}

sub to_string {
    my $self = shift;
    $$self =~ m{<title>500 (.*?)</title>}s;
    return HTML::Entities::decode($1);
}


package main;
CQAdm->cmd(@ARGV) unless caller;

1;
