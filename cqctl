#!/usr/bin/perl
use strict;

package CQCtl;

use autodie qw(:all);

use Cwd qw(cwd abs_path);
use File::Slurp qw(read_file write_file edit_file_lines);
use File::Spec 'rel2abs';
use POSIX qw(setuid setgid setsid);
use YAML 'LoadFile';

use constant WAIT_MIN => 0.5;
use constant WAIT_MAX => 3;
use constant WAIT_FACTOR=> 1.5;
use constant CONFIG_NAME => '.cqctl';
use constant CMD_MAP => { mkdir => 'mknode' };

sub new {
    my ($class, $options) = @_;
    my $self = bless { %$options }, $class;
    $self->_load_config;
    return $self;
}

sub cmd {
    my $class = shift;
    my ($options, $cmd, $args) = $class->_parse_args(@_);
    $options->{cmd} = 1;
    my $self = $class->new($options);
    $cmd = $self->CMD_MAP->{$cmd} if exists $self->CMD_MAP->{$cmd};
    $cmd = 'help' if !$cmd or !$self->can($cmd);
    my $out;
    eval {
        $out = $self->$cmd(@$args);
    };
    if ($@) {
        my $error = $@;
        $error .= "\n" if length $error and $error !~ /\n$/;
        warn $error;
        exit -1;
    } else {
        print $out;
        print "\n" if length $out and $out !~ /\n$/ and -t STDOUT;
        exit 0;
    }
}

sub _load_config {
    my ($self) = @_;
    if (exists $self->{dir}) {
        $self->{dir} = abs_path $self->{dir};
    }
    if (my $file = $self->_find_config) {
        my ($config) = LoadFile($file);
        $self->{conf} = abs_path $file;
        unless ($self->{dir}) {
            my $confdir = $self->{conf};
            $confdir =~ s{/[^/]*$}{};
            if (exists $config->{dir}) {
                $self->{dir} = File::Spec->rel2abs($config->{dir}, $confdir);
            } else {
                $self->{dir} = "$confdir/crx-quickstart" if -d "$confdir/crx-quickstart" && -x "$confdir/crx-quickstart/bin/start";
                $self->{dir} = $confdir if $confdir =~ m{/crx-quickstart\b([^/]*)$} && -x "$confdir/bin/start";
            }
        }
        $self->{$_} or $self->{$_} = $config->{$_} for keys %$config;
    }

    $self->{dir} = abs_path 'crx-quickstart' if !$self->{dir} && -d 'crx-quickstart' && -x 'crx-quickstart/bin/start';
    $self->{dir} = cwd if !$self->{dir} && cwd =~ m{/crx-quickstart\b([^/]*)$} && -x 'bin/start';

    $self->{original_cwd} = cwd;
    if (-d $self->{dir}) {
        die "cannot find $self->{dir}\n" unless -d $self->{dir};
        chdir $self->{dir};
        $ENV{PWD} = $self->{dir};
    }
}

sub _find_config {
    my ($self) = @_;
    return $self->{conf} if $self->{conf} and -r $self->{conf};
    return $self->{c} if $self->{c} and -r $self->{c};
    return $ENV{CQCTL_CONF} if $ENV{CQCTL_CONF} and -r $ENV{CQCTL_CONF};
    my $save_cwd = cwd;
    while (cwd ne '/') {
        if (-r CONFIG_NAME) {
            my $c = cwd . '/' . CONFIG_NAME;
            chdir $save_cwd;
            return $c;
        }
        chdir '..';
    }
    chdir $save_cwd;
    return $ENV{HOME} . CONFIG_NAME if $ENV{HOME} and -r $ENV{HOME} . CONFIG_NAME;
    return;
}

sub _parse_args {
    my $class = shift;

    my $cmd;
    my $options = {};
    my $args = [];

    while(@_) {
        my $a = shift;
        if ($a eq '--conf' or $a eq '-c') {
            $options->{conf} = shift;
        } elsif ($a eq '--dir') {
            $options->{dir} = shift;
        } else {
            push @$args, $a;
        }
    }

    $cmd = shift @$args;
    $cmd =~ s/-/_/g;
    $cmd = undef if $cmd =~ /^_/;

    return ($options, $cmd, $args);
}

sub help {
    die <<HELP;
usage: $0 <cmd> [ --conf|-c <file> ] [ --dir <crx-quickstart> ]
    help
    start
    stop
    status
    restart
    clear-logs [ --all|-a ]
    wait-for-stop
    tail-error-log
    tail-access-log
    set-runmode <runmodes>
    set-port <port>
    install-on-start <package.zip>
    offline-backup <path>
    get-cluster-id
    join-cluster <addresses ...> [ --id <clusterid> ]
    leave-cluster
HELP
}

sub start {
    my $self = shift;
    die "CQ is already started\n" if $self->_get_status->{running};
    die "cannot find start script " . cwd . "/bin/start\n" unless -x 'bin/start';
    _daemonize('bin/start');
    return;
}

sub clear_logs {
    my ($self, $arg) = @_;
    chdir 'logs';
    if ($arg eq '--all' or $arg eq '-a') {
        system 'rm', '-r', glob '*' if glob '*';
    } else {
        for my $log (qw(error.log access.log request.log stderr.log stdout.log)) {
            if(-e $log) {
                open LOG, '>', $log;
                close LOG;
            }
        }
    }
    return;
}

sub restart {
    my $self = shift;
    $self->stop;
    $self->start;
}

sub stop {
    my $self = shift;
    die "CQ is not running\n" unless $self->_get_status->{running};
    die "cannot find stop script " . cwd . "/bin/stop\n" unless -x 'bin/stop';
    _daemonize('bin/stop');
    return;
}

sub wait_for_stop {
    my $self = shift;
    my $pid = $self->_get_status->{pid};
    unless (_try(sub { not $self->_get_status->{running} }, 15)) {
        #warn "Sending TERM to $pid...\n";
        kill 15, $pid;
        unless (_try(sub { not $self->_get_status->{running} }, 60)) {
            #warn "Sending KILL to $pid...\n";
            kill 9, $pid;
            _try(sub { not $self->_get_status->{running} });
        }
    }
    return;
}

sub status {
    my $self = shift;
    my $status = $self->_get_status;
    print $status->{message}."\n";
    exit ($status->{running} ? 0 : 3);
}

sub _get_status {
    my $self = shift;
    my $pidfile =  'conf/cq.pid';
    my $pid = -e $pidfile && int (read_file $pidfile);
    my $running = $pid && (scalar qx{jps}) =~ m{^\Q$pid\E}m;
    my $status = {
        running => !!$running,
    };
    $status->{pid} = $pid if $pid;
    $status->{message} = "CQ is not running";
    $status->{message} = "CQ is running with pid $pid" if $running;
    return $status;
}

sub tail_error_log {
    my $self = shift;
    die "CQ is not running\n" unless $self->_get_status->{running};
    exec qw(tail -f logs/error.log);
}

sub tail_access_log {
    my $self = shift;
    die "CQ is not running\n" unless $self->_get_status->{running};
    exec qw(tail -f logs/access.log);
}

sub set_runmode {
    my ($self, $runmode) = @_;
    die "cannot find bin/start\n" unless -f 'bin/start';
    my $worked = 0;
    my (undef, undef, $save_mode) = stat 'bin/start';
    edit_file_lines { s{^(\s*CQ_RUNMODE\s*=\s*)(['"]).*?$2(\s*)$}{$1$2$runmode$2$3} and $worked = 1 } 'bin/start';
    chmod $save_mode, 'bin/start';
    die "could not set runmode\n" unless $worked;
    return;
}

sub set_port {
    my ($self, $port) = @_;
    die "cannot find bin/start\n" unless -f 'bin/start';
    my $worked = 0;
    my (undef, undef, $save_mode) = stat 'bin/start';
    edit_file_lines { s{^(\s*CQ_PORT\s*=\s*)(['"]?).*?$2(\s*)$}{$1$2$port$2$3} and $worked = 1 } 'bin/start';
    chmod $save_mode, 'bin/start';
    die "could not set port\n" unless $worked;
    return;
}

sub install_on_start {
    my ($self, $pkg) = @_;
    die "no package $pkg\n" unless -r $pkg;
    mkdir 'install' unless -d 'install';
    system('cp', $pkg, 'install/');
    return;
}

sub offline_backup {
    my ($self, $path) = @_;
    my $save_cwd = cwd;
    chdir $self->{original_cwd};
    $path = abs_path $path;
    chdir $save_cwd;
    die "will not overwrite $path" if -e $path;
    system('cp', '-an', '.', $path);
    return;
}

sub get_cluster_id {
    my $props = read_file 'repository/cluster.properties';
    $props =~ m{^\s*cluster_id\s*=\s*(\S*)}m;
    return $1;
}

sub join_cluster {
    my ($self, $options, @addrs) = _parse_cmd_opts({}, @_);
    my $id = $options->{id} || $self->get_cluster_id;
    unlink 'repository/cluster_node.id';
    my $props = "cluster_id=$id\n";
    $props .= "addresses=%s\n", join ',', @addrs;
    write_file 'repository/cluster.properties', sprintf "cluster_id=%s\naddresses=%s\n", $id, join ',', @addrs;
    system 'rm $(find . -type f -name sling.id.file)';
    return;
}

sub leave_cluster {
    my ($self, $options, @addrs) = _parse_cmd_opts({}, @_);
    my $id = $options->{id} || $self->get_cluster_id;
    unlink 'repository/cluster_node.id';
    unlink 'repository/cluster.properties';
    unlink 'repository/clustered.txt' if -e 'repository/clustered.txt';
    system 'rm $(find . -type f -name sling.id.file)';
    return;
}

sub _try {
    my $code = shift;
    my $max = shift;
    my $start = time;
    my $wait = WAIT_MIN;
    while(1) {
        my $r = $code->();
        return $r if $r;
        return if $max and time-$start > $max;
        sleep $wait;
        $wait *= WAIT_FACTOR;
        $wait = WAIT_MAX if $wait > WAIT_MAX;
    }
}

sub _daemonize {
    my $pid = fork();
    return if $pid;
    open STDIN, "< /dev/null";
    open STDOUT, "> /dev/null";
    setsid();
    open STDERR, ">&STDOUT";
    exec @_;
}

sub _parse_cmd_opts {
    my $spec = shift;
    my $self = shift;
    my $options = {};
    my @rest;
    while (@_) {
        my $o = shift;
        if ($o =~ /^-+(.*)/) {
            my $s = $1;
            $s =~ s/-/_/g;
            $s = $spec->{$s} if exists $spec->{$s} and $spec->{$s};
            $options->{$s} = (exists $spec->{$s} && !defined $spec->{$s} ? 1 : shift);
        } else {
            push @rest, $o;
        }
    }
    return ($self, $options, @rest);
}


package main;
CQCtl->cmd(@ARGV) unless caller;

1;
